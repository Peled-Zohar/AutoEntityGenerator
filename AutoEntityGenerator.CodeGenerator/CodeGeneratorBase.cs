using AutoEntityGenerator.Common.CodeInfo;
using System;
using System.Collections.Generic;
using System.Text;

namespace AutoEntityGenerator.CodeGenerator;

internal abstract class CodeGeneratorBase
{
    public string Comments =>
$@"/*
    Generated by {nameof(AutoEntityGenerator)} on {DateTime.Now}
    For more information about {nameof(AutoEntityGenerator)}, Visit https://github.com/Peled-Zohar/AutoEntityGenerator
*/
";
    protected string GenerateProperties(IEnumerable<Property> properties, Func<Property, string> propertyFormat)
    {
        var propertiesBuilder = new StringBuilder();
        foreach (var property in properties)
        {
            propertiesBuilder.AppendLine(propertyFormat(property));
        }
        return propertiesBuilder.ToString(0, propertiesBuilder.Length - Environment.NewLine.Length);
    }

    protected string GenerateTypeParameters(Entity entity)
        => entity.TypeParameters.Count > 0
            ? $"<{string.Join(", ", entity.TypeParameters)}>"
            : "";

    protected string GenerateGenericConstraints(Entity entity)
        => entity.GenericConstraints.Count > 0
            ? " " + string.Join(" ", entity.GenericConstraints)
            : "";

}
